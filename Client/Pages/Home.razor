@page "/"

@using BlazorApp.Shared
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@inject HttpClient Http
@inject ApplicationDbContext _context;
@inject IJSRuntime JsRuntime

<PageTitle>Home</PageTitle>

<h1>Project Summary</h1>

<div>
    <p>
        For this project, my focus was on the datasets that are available and ease of access to the data. 
        According to the <a target="_blank" href="https://www.fs.usda.gov/about-agency/regulations-policies/comment-on-directives">US Forest Service web page</a>,
        there are no projects open for commenting. Therefore, for the USFS a data layer from the <a target="_blank" href="https://research.fs.usda.gov/projects/stew-map">STEW-MAP</a> was added to the map below to highlight stewardship opportunities. 
    </p>
    <p>
        Since there was more information publicly available using BLM sources and limited time, that's the focus of this project. 
        To highlight my skills I used various data sources, which includes GeoJSON, CSV, Web Services and manual input.   
        The prompt is asking for comment periods to be symbolized on the map, but I wasn't able to find a dataset that had it readily available.  I tried to find existing "Plans" that had a geography tied to it by comparing the 
        NEPA # and/or Project Name in the <a href="#nepa-register">NEPA Register dataset</a>, which is where the comment dates were manually entered.  More work would need to be done to tie the comment periods with a geographic Area of Interest.
        I could add the location of the Field Office for the projects, but I'm out of time.  Hopefully, the data that has been added to the map will demonstrate my ability to add layers to a map with different symbologies.    
    </p>
    <p>
        The datasets presented on the BLM project portal offer a vital foundation for public advocacy and conservation efforts by enhancing transparency and accessibility to federal land management decisions. With detailed records of approved, in-development, and revision-stage Resource Management Plans (RMPs), stakeholders—including environmental organizations, local communities, and policy advocates—can monitor land use changes, identify ecological risks, and engage meaningfully during public comment periods. The integration of STEW-MAP data further empowers grassroots stewardship by mapping civic environmental actors, helping advocates align conservation priorities with community capacities. By visualizing these plans through interactive ArcGIS tools, the platform transforms static policy into actionable insight, enabling informed dialogue and collaborative planning for sustainable land use.
    </p>
</div>

<div>
    <h3>Map Data</h3>
    <p>
        This map is using the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/">ArcGIS Maps SDK</a> to display the interactive features from the
        BLM FeatureServer (<a target="_blank" href="https://services1.arcgis.com/KbxwQRRfWyEYLgp4/arcgis/rest/services/BLM_Natl_Land_Use_Plans_Approved_2022/FeatureServer/1">Approved Layer</a>, <a href="https://services1.arcgis.com/KbxwQRRfWyEYLgp4/ArcGIS/rest/services/BLM_Natl_Revision_Development_Land_Use_Plans/FeatureServer/0">In Development Layer</a>). You can <a target="_blank" href="https://github.com/bwinklesky/onX/blob/main/Client/wwwroot/app.js">view the JavaScript</a> for more information.
    </p>
    <p>I added a Layer List so the end-user can turn off or turn on the different layers so make it easier to drill down into the content.  
        I also added a legend to assist the end-user in understanding what they are viewing. The end-user can click on the different polygons </p>
</div>

<div id="viewDiv" style="height:600px;margin:10px"></div>

<div>

    <h3>
        BLM Land Use Plans 
    </h3>
    <p>
        Datasets used for the BLM data is located <a target="_blank" href="https://www.blm.gov/programs/planning-and-nepa/plans-in-development">here</a>.
    </p>       

</div>

<div>
    <h3>BLM Plans Under Revision or Development</h3>
    <p>
        This dataset was downloaded as a <a target="_blank" href="https://github.com/bwinklesky/onX/blob/main/Client/wwwroot/BLM_Natl_Revision_Development_Land_Use_Plans_7679825753955010227.geojson">GeoJSON</a> file
        from the <a target="_blank" href="https://gbp-blm-egis.hub.arcgis.com/datasets/BLM-EGIS::blm-natl-revision-development-land-use-plans/explore">ArcGIS Hub</a> 
        and processed for display using an <a target="_blank" href="https://github.com/bwinklesky/onX/blob/86038876f170c31d380a8a533f5fc342185b3b12/Client/Program.cs#L63">In-Memory database</a>.
    </p>
</div>

@if (plans == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>NEPA #</th>
                <th>Name</th>
                <th>Status</th>
                <th>ePlanning</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var plan in plans)
            {
                <tr>
                    <td>@plan.Number</td>
                    <td>@plan.Name</td>
                    <td>@plan.Status</td>
                    <td>
                        <a target="_blank" href="@plan.ePLink">View</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


<div>
    <h3>BLM Approved Project Plans</h3>
    <p>
        This dataset is downloaded dynamically using an <a target="_blank" href="https://github.com/bwinklesky/onX/blob/67978e5064bb622c91952353af3e592d728d63cc/Api/PlansFunction.cs#L30">Azure function and C# to convert from JSON</a> to a data model from the <a target="_blank" href="https://services1.arcgis.com/KbxwQRRfWyEYLgp4/arcgis/rest/services/BLM_Natl_Land_Use_Plans_Approved_2022/FeatureServer/1/query">BLM ArcGIS Feature Server</a>
        and processed for display using a Web Service endpoint.
    </p>
</div>

@if (approvedPlans == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>NEPA #</th>
                <th>Name</th>
                <th>Status</th>
                <th>ePlanning</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var plan in approvedPlans)
            {
                <tr>
                    <td>@plan.Number</td>
                    <td>@plan.Name</td>
                    <td>@plan.Status</td>
                    <td>
                        <a target="_blank" href="@plan.ePLink">View</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



<div>
    <h3 id="nepa-register">BLM NEPA Projects</h3>
    
    <p>
        This dataset is pulled from the <a target="_blank" href="https://eplanning.blm.gov/eplanning-ui/home">BLM National NEPA Register</a> as a <a target="_blank" href="https://github.com/bwinklesky/onX/blob/main/Client/wwwroot/SearchResults.csv">CSV</a> and converted
        to a data model for <a target="_blank" href="https://github.com/bwinklesky/onX/blob/67978e5064bb622c91952353af3e592d728d63cc/Client/Program.cs#L36">display using C#</a>.

    </p>
    <p class="bg-warning p-2">
        Unfortunately, the comment period dates are not published in any of the datasets.  
        However, an <a target="_blank" href="https://github.com/bwinklesky/onX/blob/main/Api/PlansFunction.cs#L53">initial attempt</a> was made to scrape the ePlanning project pages to collect the dates.
        It has been commented out for performance reasons and would need to be done in a background process.
        The comment start and end dates were entered manually in the CSV where it was available.  
    </p>
</div>

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>NEPA #</th>                
                <th>Name</th>
                <th>Status</th>
                <th>Office</th>
                <th>Fiscal Year</th>
                <th>Comment Period</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                <tr>
                    <td>@project.Number</td>
                    <td>@project.Name</td>
                    <td>@project.Status</td>
                    <td>@project.LeadOffice</td>
                    <td>@project.FiscalYear</td>
                    <td>
                        @if(!string.IsNullOrEmpty(project.Start))
                        {
                            <div>
                               Starts: @project.Start                                
                            </div>

                        }
                        @if (!string.IsNullOrEmpty(project.End))
                        {
                            <div>
                                Ends: @project.End
                            </div>
                        }                        
                     </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    private NEPAProject[] projects = new NEPAProject[] { };
    private Plan[] plans = new Plan[] { };

    private static List<Plan> approved = new();

    private Plan[] approvedPlans = new Plan[] { };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("renderMap");
        }

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            approvedPlans = await Http.GetFromJsonAsync<Plan[]>("/api/Plans") ?? new Plan[] { };

            projects = await _context.NEPAProjects.ToArrayAsync();
            plans = await _context.Plans.ToArrayAsync();

            foreach(var proj in projects)
            {
                var item = approvedPlans.Where(i => i.Name == proj.Name).ToList();
                if (item.Count > 0)
                {
                    
                
                }
                item = plans.Where(i => i.Name == proj.Name).ToList();
                if (item.Count > 0)
                {


                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

    }
}
